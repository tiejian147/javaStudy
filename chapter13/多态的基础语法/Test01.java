/**
 * 多态的基础语法：
 *      1、学习多态基础语法之前，我们需要普及两个概念：
 *          第一个：向上转型
 *              子----->父（自动类型转换）
 *          第二个：向下转型
 *              父----->子（强制类型转换，需要加强制类型转换符）
 * 
 *          注意：java中允许向上转型，也允许向下转型
 * 
 *          *****（五颗星）无论是向上转型，还是向下转型，
 *          两种类型之间必须要有继承关系，没有继承关系编译器会报错。
 * 
 *          在工作中，沟通时候，要专业：说向上转型和向下转型，不要说自动类型转换，
 *          也不要说强制类型转换，因为自动类型转换和强制类型转换是使用在基本数据类型
 *          方面的，在引用类型转换这里只有向上和向下转型。
 */

public class Test01 {
    public static void main(String[] args){
        Animal a1 = new Animal();
        a1.move();

        Cat c1 = new Cat();
        c1.move();

        Brid b1 = new Brid();
        b1.move();

        //代码是否可以这样写：
        /**
         * 1、Animal和Cat之间有继承关系吗？有的
         * 2、Animal是父类，Cat是子类。
         * 3、Cat is a Animal   这句话能不能说通？  能
         * 4、经过测试得知java中支持这样的写法：
         *      父类型的引用允许指向子类型的对象。
         *      Animal a2 = new Cat();
         *      a2就是父类型的引用
         *      new Cat();是一个子类型的对象
         *      允许a2这个父类型引用子类型的对象
         * 
         */

         Animal a2 = new Cat();
         Animal a3 = new Brid();

        //没有继承关系的两个类型质检存在转型吗？
        //错误：不兼容的类型：Dog 无法转换为Animal
        //Animal a4 = new Dog();

        //调用a2的move（） 方法
        /**
         * 什么是多态？
         *      多重形态，多重状态
         *  分析：a2.move();
         *      java程序分为编译阶段和运行阶段
         *      先来分析编译阶段：
         *          对于编译器来说，编译器只知道a2的类型是Animal，
         *          所以编译器在检查语法的时候，会去Animal.class
         *          字节码文件中找move()方法， 找到之后，绑定上move()
         *          方法，编译通过，静态绑定成功（编译阶段属于静态绑定）
         *      再来分析运行阶段：
         *          运行阶段的时候，实际上在堆内存中创建的java对象是Cat对象，所以move
         *          的时候，真正参与move的对象是一只猫，所以运行阶段会动态执行Cat对象的
         *          move()fangfa ,这个过程属于运行阶段绑定。（
         */
        a2.move();
        //调用a3的move方法
        a3.move();
    }
    
}
//动物类
class Animal{

    // String name;

    //编写移动的方法
    public void move(){
        System.out.println("动物在移动");
    }
}